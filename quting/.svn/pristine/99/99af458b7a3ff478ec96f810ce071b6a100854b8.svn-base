package com.example.quting.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Comparator;

import android.graphics.Bitmap;
import android.os.Environment;
import android.os.StatFs;
import android.util.Log;

public class SDCardUtils {

	private SDCardUtils() {
		
	}

	private static SDCardUtils instance;

	public static synchronized SDCardUtils getInstance() {
		if (instance == null) {
			instance = new SDCardUtils();
		}
		return instance;
	}

	private String TAG = "SDCardUtils ";
	// 设定空间为5M时为空间不足的规则
	private int FREE_SD_SPACE_NEEDED_TO_CACHE = 5;
	private String WHOLESALE_CONV = "jpg";
	// 缓存空间大小 M
	private int CACHE_SIZE = 1024;

	/**
	 * 检测sdcard是否可用
	 * @return true or false
	 * */
	public boolean checkSDCardStatus() {
		if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
			// sd card 可用
			return true;
		} else {
			// 当前不可用
			return false;
		}
	}

	/**
	 * 将图片保存到sdcard上
	 * @param bitmap
	 *            filename
	 * @param file
	 *            name default data value
	 * @param directory
	 *            save bitmap path
	 * */
	public void saveBmpToSd(Bitmap bm, String filename, String directory) {
		if (bm == null) {
			Log.w(TAG, " trying to save null bitmap");
			return;
		}
		// 判断sdcard上的空间
		if (FREE_SD_SPACE_NEEDED_TO_CACHE > freeSpaceOnSd()) {
			Log.w(TAG, "Low free space onsd, do not cache");
			return;
		}
		String dir = directory;
		File file = new File(SDCardUtil.defaultPath()+"/"+dir + "/" + filename);
		if(!file.exists()){
			file.mkdirs();
		}
		try {
			file.createNewFile();
			OutputStream outStream = new FileOutputStream(file);
			bm.compress(Bitmap.CompressFormat.JPEG, 100, outStream);
			outStream.flush();
			outStream.close();
			Log.i(TAG, "Image saved to sdcard");
		} catch (FileNotFoundException e) {
			Log.w(TAG, "FileNotFoundException");
		} catch (IOException e) {
			Log.w(TAG, "IOException");
		}
	}

	/**
	 * 计算sdcard上的剩余空间
	 * @return
	 */
	private int freeSpaceOnSd() {
		StatFs stat = new StatFs(Environment.getExternalStorageDirectory()
				.getPath());
		double sdFreeMB = ((double) stat.getAvailableBlocks() * (double) stat
				.getBlockSize()) / 1024;
		return (int) sdFreeMB;
	}

	/**
	 * 修改文件的最后修改时间
	 * @param dir
	 * @param fileName
	 */
	private void updateFileTime(String dir, String fileName) {
		File file = new File(dir, fileName);
		long newModifiedTime = System.currentTimeMillis();
		file.setLastModified(newModifiedTime);
	}

	/**
	 * 文件排序
	 */
	class FileLastModifSort implements Comparator<File> {
		public int compare(File arg0, File arg1) {
			if (arg0.lastModified() > arg1.lastModified()) {
				return 1;
			} else if (arg0.lastModified() == arg1.lastModified()) {
				return 0;
			} else {
				return -1;
			}
		}
	}

	/**
	 * 计算存储目录下的文件大小，
	 * 当文件总大小大于规定的CACHE_SIZE或者sdcard剩余空间小于FREE_SD_SPACE_NEEDED_TO_CACHE的规定
	 * 那么删除40%最近没有被使用的文件
	 * @param dirPath
	 * @param filename
	 */
	public void removeCache(String dirPath) {
		File dir = new File(dirPath);
		File[] files = dir.listFiles();
		if (files == null) {
			return;
		}
		int dirSize = 0;
		for (int i = 0; i < files.length; i++) {
			if (files[i].getName().contains(WHOLESALE_CONV)) {
				dirSize += files[i].length();
			}
		}
		if (dirSize > CACHE_SIZE * 1024
				|| FREE_SD_SPACE_NEEDED_TO_CACHE > freeSpaceOnSd()) {
			int removeFactor = (int) ((0.4 * files.length) + 1);
			Arrays.sort(files, new FileLastModifSort());
			Log.i(TAG, "Clear some expiredcache files ");
			for (int i = 0; i < removeFactor; i++) {
				if (files[i].getName().contains(WHOLESALE_CONV)) {
					files[i].delete();
				}
			}
		}
	}

	/**
	 * 删除过期文件
	 * @param dirPath
	 * @param filename
	 * @param mTimeDiff
	 *            ：get the value in Configuration
	 */
	private void removeExpiredCache(String dirPath, String filename,
			long mTimeDiff) {
		File file = new File(dirPath, filename);
		if (System.currentTimeMillis() - file.lastModified() > mTimeDiff) {
			Log.i(TAG, "Clear some expiredcache files ");
			file.delete();
		}
	}

	public boolean removeFileDir(File file) {
		if (file.exists()) {
			if (file.isFile()) {
				file.delete();
			} else if (file.isDirectory()) {
				File files[] = file.listFiles();
				for (int i = 0; i < files.length; i++) {
					this.removeFileDir(files[i]);
				}
			}
			return true;
		} else {
			return true;
		}
	}
}
